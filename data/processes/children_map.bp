@main[][locals]

$hDefaultConfig[
	$.alphabetical(0)
	$.thread-id[$currentObject.thread_id]
	$.current-object-id[$currentObject.id]
	
]

$hConfig[^json:parse[{$parseBlock_data}]]
$hConfig[^hConfig.union[$hDefaultConfig]]

$bWhiteList(false)
^if(def $hConfig.[white-list]){
	$bWhiteList(true)
	$tWhiteList[^hConfig.[white-list].split[,]]
	$hWhiteList[^hash::create[]]
	^tWhiteList.menu{
		$hWhiteList.[^tWhiteList.piece.trim[]](true)
	}
}

$sLangUrl[$MAIN:sLangUrl]
$tObject[^self.getObjectsByThread[$hConfig.[thread-id]]]
$hId[^hash::create[$.[$hConfig.[current-object-id]](true)]]
$tObject[^self.filterSubthread[$tObject;$hId]]
$hObject[^tObject.hash[parent_id][$.distinct[tables]]]
$sBasePath[^currentObject.full_path.left(^currentObject.full_path.length[]-^currentObject.path.length[]-1)]
$sBasePath[^sBasePath.trim[both;/]]

^if(def $hConfig.[block-name]){
	$tBlock[^oSql.table{
		select
			object_id,
			data,
			name
		from
			block_to_object join block using(block_id)
			join lang_to_block using(block_id)
		where
			object_id in (0,^hId.foreach[k;]{$k}[,]) and
			lang_id in ($iLangID, 255) and
			is_published=1 and
			is_parsed_manual=0 and
			^if($hConfig.[block-name] is hash){
				name in (^hConfig.[block-name].foreach[;name]{'$name'}[,]) 
			}{
				name = '$hConfig.[block-name]'
			}
	}]
}

$hParam[
	$.hBlock[^if(def $hConfig.[block-name]){^tBlock.hash[object_id][ $.type[table] $.distinct(1)]}]
	$.bWhiteList($bWhiteList)
	$.hWhiteList[$hWhiteList]
]

<structural>
	^untaint[as-is]{^self.goHashTree[$hObject;$currentObject.parent_id;$isShowOnSiteMap;$sBasePath;item;;$printServiceItem;$hParam]}
</structural>

# Осторожно! Тут неопознанный костыль с типом объекита 
^if($hConfig.alphabetical){
#	$tObject[^tObject.select($tObject.object_type_id==86 && (!$bWhiteList || def $hWhiteList.[$tObject.id]))]
	$tObject[^tObject.select($tObject.object_type_id==86)]
	^tObject.sort{$tObject.name}
	<alphabetical>
	^untaint[as-is]{
		^tObject.menu{
			<item object-id="$tObject.id" type="service" href="${sLangUrl}$tObject.full_path" path="$tObject.path">
				<name>$tObject.name</name>
				^if(def $hBlock.[$tObject.id]){
					^hBlock.[$tObject.id].menu{
						<$hBlock.[$tObject.id].name>$hBlock.[$tObject.id].data</$hBlock.[$tObject.id].name>
					}
				}
			</item>
		}
	}
	</alphabetical>
}


@filterSubthread[tObject;hId][iCount]

	$iCount(^hId._count[])
	^tObject.menu{
		^if(!$hId.[$tObject.id]){
			^if($hId.[$tObject.parent_id]){
				$hId.[$tObject.id](true)
			}
		}
	}
	^if(^hId._count[]>$iCount){
		^self.filterSubthread[$tObject;$hId]
	}{
#		output
		^tObject.select(def $hId.[$tObject.id])
	}


	
@printServiceItem[hItem;sParentURL;sTagName;sBody;hParam][sURL;bPrint]

	$sURL[^self.getObjectURL[$hItem;$sParentURL]]
	$result[
		<$sTagName
			object-id="$hItem.id"
			type="^self.getObjectTypeABBR[$hItem]"
			^if(def $sURL){href="^taint[xml][^sURL.replace[$tUnAmp]]"}
			^if($currentBranchObject.id == $hItem.id){
				selected="^if(^self.isBranchCurrent[]){current}{parent}"
			}{
				^if(def $oCurrentAncestor && ^oCurrentAncestor.contain[$hItem.id]){
					selected="parent"
				}
			}
			^if($hItem.link_to_object_id){
				link-id="$hItem.link_to_object_id"
			}
			path="$hItem.path"
			^if( $hItem.object_type_id==86 && $hParam.bWhiteList && !def $hParam.hWhiteList.[$hItem.id] ){
				blacklisted="true"
			}
		>
			<name>$hItem.name</name>
			^if(def $hParam.hBlock.[$hItem.id]){
				^hParam.hBlock.[$hItem.id].menu{
					<$hParam.hBlock.[$hItem.id].name>$hParam.hBlock.[$hItem.id].data</$hParam.hBlock.[$hItem.id].name>
				}
			}
			$sBody
		</$sTagName>
	]

	

# Перекрытие метода из Engine
# Рекомендуется перенести в EngineProject.p	
@goHashTree[hTree;sParentKey;jCondition;sParentURL;sTagName;iLevel;jCustomMethod;hCustomParam][tLevel;jMethod]

$result[]
^if($hTree.$sParentKey){
	$tLevel[^hTree.[$sParentKey].select(^jCondition[$hTree.$sParentKey])]
	^if($tLevel){
		^tLevel.sort($tLevel.sort_order)[asc]
		^if(!$iLevel){
			$iLevel(0)
			$jMethod[$printRootItem]
		}{
			$jMethod[$printBranchItem]
		}

		^if($jCustomMethod is junction && $iLevel){
			$result[^tLevel.menu{
				^jCustomMethod[$tLevel;$sParentURL;$sTagName;^if($hTree.[$tLevel.id]){^self.goHashTree[$hTree;$tLevel.id;$jCondition;$sParentURL^if(def $tLevel.path && !^self.isFake[$tLevel]){/$tLevel.path};$sTagName]($iLevel+1)[$jCustomMethod][$hCustomParam]};$hCustomParam]
			}]
		}{
			$result[^tLevel.menu{
				^jMethod[$tLevel;$sParentURL;$sTagName;^if($hTree.[$tLevel.id]){^self.goHashTree[$hTree;$tLevel.id;$jCondition;$sParentURL^if(def $tLevel.path && !^self.isFake[$tLevel]){/$tLevel.path};$sTagName]($iLevel+1)[$jCustomMethod][$hCustomParam]}]
			}]
		}
	}
}